#include <iostream>#include <sstream>#include <cctype>#include "AVL.h"#include "userInput.h"using namespace std;int main(){    AVLTree avlTree;    //gets num of commands    string num;    getline(cin, num);    for (int i = 0; i < stoi(num); i++) {        vector<string> parameters;        string line;        getline(cin, line);        istringstream in(line);        userInput input(line);        parameters = input.ParseInput();        // checks to see what the inserted input is        if (parameters[0] == "insert") {            if (!input.checkValidParameters(parameters[1], parameters[2], true) || !avlTree.checkUnique(parameters[2])) {                cout << "unsuccessful" << endl;                continue;            }            else {                avlTree.insert(parameters[1], parameters[2]);            }        }        else if (parameters[0] == "remove") {            input.checkValidParameters("", parameters[1], false);            avlTree.remove(parameters[1]);        }        else if (parameters[0] == "search") {            if (parameters[1][0] == '"') {                parameters[1] = parameters[1].substr(1, parameters[1].length()-2);                // verifies the input is valid                if (!input.checkValidParameters(parameters[1], "", false)) {                    cout << "unsuccessful" << endl;                    continue;                }                avlTree.searchName(parameters[1]);            }            else {                // verifies the input is valid                if (!input.checkValidParameters("", parameters[1], false)) {                    cout << "unsuccessful" << endl;                    continue;                }                string output = avlTree.searchID(parameters[1]);                cout << output << endl;            }        }        // finds the traversal, and prints the resultant vector        else if(parameters[0] == "printInorder" || parameters[0] == "printPreorder" || parameters[0] == "printPostorder") {            vector<string> traversalVector = avlTree.returnTraversal(parameters[0]);            for(auto node : traversalVector) {                if (node == traversalVector[traversalVector.size() - 1]) {                    cout << node << endl;                } else {                    cout << node << ", ";                }            }        }        // prints the counts        else if(parameters[0] == "printLevelCount") {            int output = avlTree.printLevelCount();            cout << output << endl;        }        else if(parameters[0] == "removeInorder") {            int index = stoi(parameters[1]);            avlTree.removeInorder(index);        }        else {            cout << "unsuccessful" << endl;            continue;        }    }	return 0;}